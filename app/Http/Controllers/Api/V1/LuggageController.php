<?php

namespace App\Http\Controllers\Api\V1;

use App\Actions\Luggage\CreateLuggage;
use App\Actions\Luggage\UpdateLuggage;
use Illuminate\Routing\Controller;
use App\Http\Requests\Luggage\StoreLuggageRequest;
use App\Http\Requests\Luggage\UpdateLuggageRequest;
use App\Http\Resources\LuggageResource;
use App\Models\Luggage;
use App\Enums\LuggageStatusEnum;
use Illuminate\Http\Request;

class LuggageController extends Controller
{
    /**
     * üì¶ Lister les valises de l'utilisateur connect√©
     */
    public function index(Request $request)
    {
        $luggages = $request->user()->luggages()->latest()->paginate(10);

        return LuggageResource::collection($luggages);
    }

    /**
     * ‚ûï Cr√©er une nouvelle valise
     */
    public function store(StoreLuggageRequest $request)
    {
        $luggage = CreateLuggage::execute($request->user(), $request->validated());

        return response()->json(new LuggageResource($luggage), 201);
    }

    /**
     * üëÅÔ∏è Voir une valise en d√©tail
     */
    public function show(Luggage $luggage)
    {
        $this->authorize('view', $luggage);

        return new LuggageResource($luggage);
    }

    /**
     * ‚úèÔ∏è Modifier une valise
     */
    public function update(UpdateLuggageRequest $request, Luggage $luggage)
    {
        $this->authorize('update', $luggage);

        $luggage = UpdateLuggage::execute($luggage, $request->validated());

        return new LuggageResource($luggage);
    }

    /**
     * üóëÔ∏è Supprimer une valise
     */
    public function destroy(Luggage $luggage)
    {
        $this->authorize('delete', $luggage);

        $luggage->delete();

        return response()->json([
            'message' => 'Valise supprim√©e avec succ√®s.',
        ]);
    }
}
